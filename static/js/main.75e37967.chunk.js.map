{"version":3,"sources":["assets/image/image.png","assets/maps/mexican.topojson","components/AppHeader.js","components/MapSelector.js","components/StateMapContainer.js","components/StateListContainer.js","components/CardSelector.js","components/StateDataContainer.js","components/GeneralGraph.js","components/MinimalGraph.js","components/MortalityGraph.js","components/CentralContainer.js","components/Footer.js","components/LastUpdate.js","components/SEO/SEO.js","containers/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","Navbar","bg","variant","Brand","href","MapSelector","datosDiarios","dataset","slice","length","colorScale","scaleQuantile","domain","map","d","confirmados","range","project","geoConicConformal","rotate","center","parallels","scale","translate","width","height","projection","geography","mapData","geographies","geo","props","cur","find","s","iso","properties","gmi_admin","OverlayTrigger","placement","key","rsmKey","overlay","Tooltip","id","nombre","className","fill","stroke","Component","StateMapContainer","mapa","titulo","StateListContainer","Table","striped","datosPasados","datosListado","i","push","diferencia","decesos","diferenciaDecesos","rateDeath","datosLista","sort","a","filter","c","x","pos","toString","decimalLength","indexOf","numStr","substr","Number","residuoDeathRate","handleList","CardSelector","tipo","cifra","subcifra","Card","Body","Title","Text","end","delay","StateDataContainer","data","conf","confdiff","sus","sospechosos","sosdiff","des","desdiff","Row","Col","handleData","total","ultimo","fechaformat","panelPerDay","GeneralGraph","dbnacional","dataKey","strokeDasharray","type","label","MinimalGraph","act","ant","value","diffList","dia","suma","reverse","diffDays","margin","top","right","left","bottom","position","angle","MortalityGraph","mortDays","CentralContainer","Container","xs","md","Footer","LastUpdate","date_update","Alert","SEO","name","content","rel","property","ogImg","HomeContainer","App","exact","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75e37967.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.ee9432ce.png\";","module.exports = __webpack_public_path__ + \"static/media/mexican.e5173ac9.topojson\";","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nconst AppHeader = () =>{\n    return (\n        <div>\n            <Navbar bg=\"gray\" variant=\"light\">\n                <Navbar.Brand href=\"/\">MX COVID-19</Navbar.Brand>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default AppHeader;\n","import React, { Component } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { geoConicConformal } from 'd3-geo';\nimport { scaleQuantile } from 'd3-scale'; \nimport { Tooltip, OverlayTrigger } from 'react-bootstrap'; \nimport mapData from './../assets/maps/mexican.topojson'; \nimport dataset from '../database/dbestados';\n\nclass MapSelector extends Component {\n    render() {\n        let width = 750; \n        let height = 400; \n        let datosDiarios = dataset.slice(dataset.length - 32, dataset.length);\n\n        const colorScale = scaleQuantile()\n            .domain(datosDiarios.map(d => d.confirmados))\n            .range([\n                \"#fef1d2\",\n                \"#fedfa9\",\n                \"#f3c379\",\n                \"#e19254\",\n                \"#c35646\"\n              ]);\n\n        let project = geoConicConformal()\n            .rotate([102, 0])\n            .center([0, 24])\n            .parallels([17.5, 29.5])\n            .scale(1200)\n            .translate([width / 2, height / 2]);\n        \n        function renderTooltip(props) {\n            return (\n                <Tooltip id=\"button-tooltip\">\n                    {props.nombre} <br/> <span className='tooltip-conf'>({props.confirmados})</span>\n                </Tooltip>\n            );\n        }\n\n        return (\n            <>\n                <ComposableMap projection={project} height={450} width={700}>\n                        <Geographies geography={mapData}>\n                            {({geographies}) => \n                                geographies.map(geo => {\n                                    const cur = datosDiarios.find(s => s.iso === geo.properties.gmi_admin);\n                                    return (\n                                        <OverlayTrigger\n                                            placement=\"right\"\n                                            key={geo.rsmKey}\n                                            overlay={renderTooltip(cur)}\n                                        >\n                                            <Geography \n                                                key={geo.rsmKey} \n                                                geography={geo}\n                                                fill={cur ? colorScale(cur.confirmados) : \"#a3a3a3\"}\n                                                stroke=\"#17789b\"\n                                            />\n                                        </OverlayTrigger>\n                                    );\n                                })\n                            }\n                        </Geographies>\n                </ComposableMap>\n            </>\n        );\n    }\n}\n\nexport default MapSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MapSelector from './MapSelector';\n\nconst StateMapContainer = ({ mapa, titulo }) => {\n    return (\n        <>\n            <div className='title-map-state'>{titulo}</div>\n            <div className='svg-map-state'>\n                <MapSelector mapa={mapa} />\n            </div>\n        </>\n    );\n}\n\nStateMapContainer.propTypes = {\n    titulo: PropTypes.string.isRequired,\n    mapa: PropTypes.string.isRequired,\n};\n\nexport default StateMapContainer;","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport dataset from '../database/dbestados';\n\nconst StateListContainer = () =>{\n    const handleList = () =>{\n        let datosDiarios = dataset.slice(dataset.length - 32, dataset.length);\n        let datosPasados = dataset.slice(dataset.length - 64, dataset.length - 32);\n\n        // funcion para crear un nuevo arraylist con coparación de datos anteriores\n        let datosLista = () =>{\n            let datosListado = []; \n            for (var i = 0; i < datosDiarios.length; i++){\n                datosListado.push({\n                    nombre: datosDiarios[i].nombre,\n                    confirmados: datosDiarios[i].confirmados,\n                    diferencia: datosDiarios[i].confirmados - datosPasados[i].confirmados,\n                    decesos: datosDiarios[i].decesos,\n                    diferenciaDecesos: datosDiarios[i].decesos - datosPasados[i].decesos,\n                    rateDeath: datosDiarios[i].decesos * 100 / datosPasados[i].confirmados\n                }); \n            }\n            return(datosListado); \n        }\n\n        datosDiarios = datosLista(); \n\n        //Ordenar lista de mayor a menor\n        datosDiarios = datosDiarios.sort(({confirmados:a}, {confirmados:b}) => b-a);\n\n        let residuoDeathRate =(x, pos =2) =>{\n            var s = x.toString()\n\n            var decimalLength = s.indexOf('.') + 1\n            var numStr = s.substr(0, decimalLength + pos)\n            return Number(numStr)\n        } \n\n        return(\n            datosDiarios.filter(c => c.confirmados > 0).map( c => \n                <tr key={c.iso}>\n                    <td>{c.nombre}</td>\n                    <td className='tabla-conf'>{c.confirmados} {c.diferencia > 0 ? <span className='diff-lista'>(+{c.diferencia})</span> : \" \"}</td>\n                    <td className='tabla-conf'>{c.decesos} {c.diferenciaDecesos > 0 ? <span className='diff-lista'>(+{c.diferenciaDecesos})</span> : \" \"}</td>\n                    <td>{residuoDeathRate(c.rateDeath)} %</td>\n                </tr>             \n            )\n        )\n    }\n    return (\n        <div className='TablaConfirmados'>\n            <Table striped>\n                <thead>\n                    <tr>\n                        <th className='tabla-header'>Estado</th>\n                        <th className='tabla-header'>Confirmados</th>\n                        <th className='tabla-header'>Decesos</th>\n                        <th className='tabla-header'>Tasa de mortalidad</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        handleList(dataset)\n                    }\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport default StateListContainer; \n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\nimport CountUp from 'react-countup'; \n\nconst CardSelector = ({tipo, titulo, cifra, subcifra}) => {\n    return (\n        <>\n            <Card className={tipo}>\n                <Card.Body>\n                    <Card.Title className=\"card-titulo\">{titulo}</Card.Title>\n                    <Card.Text className=\"card-numero\">\n                        <CountUp end={cifra} /> <br/>\n                        <span className=\"card-subnumero\">(+<CountUp delay={1.5} end={subcifra} />)</span>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </>\n    );\n}\n\nCardSelector.propTypes = {\n    tipo: PropTypes.string.isRequired,\n    titulo: PropTypes.string.isRequired,\n    cifra: PropTypes.number.isRequired,\n    subcifra: PropTypes.number.isRequired\n};\n\nexport default CardSelector;","import React from 'react';\nimport CardSelector from './CardSelector';\nimport { Row, Col } from 'react-bootstrap';\nimport dataset from '../database/dbnacional'; \n\nconst StateDataContainer = () =>{\n    const handleData = data =>{\n\n        let conf = data[data.length - 1].confirmados;\n        let confdiff = data[data.length - 1].confirmados - data[data.length - 2].confirmados;\n        let sus = data[data.length - 1].sospechosos;\n        let sosdiff = data[data.length - 1].sospechosos - data[data.length - 2].sospechosos;\n        let des = data[data.length - 1].decesos;\n        let desdiff = data[data.length - 1].decesos - data[data.length - 2].decesos;\n        \n        return(\n            <Row>\n                <Col>\n                    <CardSelector tipo='confirm' titulo='Confirmados' cifra={conf} subcifra={confdiff} />\n                </Col>\n                <Col>\n                    <CardSelector tipo='suspect' titulo='Sospechosos' cifra={sus} subcifra={sosdiff} />\n                </Col>\n                <Col>\n                    <CardSelector tipo='mortality' titulo='Defunciones' cifra={des} subcifra={desdiff} />\n                </Col>\n            </Row>\n        ) \n    }\n    const panelPerDay = data =>{\n        let total = data.length; \n        let ultimo = data.length - 7; \n        return(\n            <Row className='panel-div'>\n                {\n                    data.slice(ultimo - total).map(c =>\n                        <Col key={c.key}>\n                            <p className=\"data-panel dp-c\">{c.confirmados}</p>\n                            <p className=\"data-panel dp-s\">{c.sospechosos}</p>\n                            <p className=\"data-panel dp-d\">{c.decesos}</p>\n                            <p className=\"data-date\">{c.fechaformat}</p>\n                        </Col>\n                    )\n                }\n            </Row>\n        )\n    }\n    return (\n        <div>\n            {\n                handleData(dataset)\n            }\n            {\n                panelPerDay(dataset)\n            }\n        </div>\n    );\n};\n\nexport default StateDataContainer;\n","import React from 'react';\nimport { \n            LineChart, \n            Line, \n            XAxis, \n            YAxis, \n            CartesianGrid, Tooltip, Legend, Brush, ReferenceLine \n        } from 'recharts';\nimport dbnacional from '../database/dbnacional'; \n\nconst GeneralGraph = () =>{\n    //graficas de rechart\n    return (\n        <div className=\"graphContainer\">\n            <LineChart\n                width={500}\n                height={300}\n                data={dbnacional}\n            >\n\n                <Brush dataKey=\"name\" height={30} stroke=\"#bee5eb\" />   \n                <CartesianGrid strokeDasharray=\"5 5\" />\n                <XAxis dataKey=\"fechaformat\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"confirmados\" stroke=\"#f49435\" />\n                <Line type=\"monotone\" dataKey=\"sospechosos\" stroke=\"#347aac\" />\n                <Line type=\"monotone\" dataKey=\"decesos\" stroke=\"#333\" />\n                <ReferenceLine x=\"17-Marzo\" stroke=\"#e19254\" label=\"suspención de clases\" strokeDasharray=\"3 3\" />\n                <ReferenceLine x=\"30-Marzo\" stroke=\"#e19254\" label=\"emergencia sanitaria\" strokeDasharray=\"3 3\" />\n                <ReferenceLine x=\"24-Marzo\" stroke=\"#e19254\" label=\"fase 2\" strokeDasharray=\"3 3\" />\n                <ReferenceLine x=\"21-Abril\" stroke=\"#e19254\" label=\"fase 3\" strokeDasharray=\"3 3\" />\n            </LineChart>\n        </div>\n    );\n};\n\nexport default GeneralGraph;\n","import React from 'react'; \nimport dataset from '../database/dbnacional'; \nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  } from 'recharts';\n\nconst MinimalGraph = () =>{\n\n    let diffDays = () => {\n        let value = dataset.length - 1\n        let act, ant; \n        let diffList = []; \n        \n        while(value > 0){\n            act = dataset[value].confirmados;\n            ant = dataset[value - 1].confirmados;\n            diffList.push({\n                dia: dataset[value].fechaformat,\n                suma: act-ant\n            }); \n            value -= 1\n        }\n        return(\n            diffList.reverse()\n        );\n    }\n    return(\n        <div className='newcases-graph'>\n                <h4>Casos confirmados por día</h4>\n                <BarChart\n                    width={700}\n                    height={200}\n                    data={diffDays()}\n                    margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"dia\" />\n                    <YAxis dataKey=\"suma\" />\n                    <Tooltip />\n                    <Legend />\n                    <Bar type=\"monotone\" dataKey=\"suma\" fill=\"#f49435\" label={{ position: 'center', angle: 90 }} />\n                </BarChart>\n        </div>\n    ); \n}\n\nexport default MinimalGraph;","import React from 'react'; \nimport dataset from '../database/dbnacional'; \nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  } from 'recharts';\n\nconst MortalityGraph = () =>{\n\n    let mortDays = () => {\n        let value = dataset.length - 1\n        let act, ant; \n        let diffList = []; \n        \n        while(value > 0){\n            act = dataset[value].decesos;\n            ant = dataset[value - 1].decesos;\n            diffList.push({\n                dia: dataset[value].fechaformat,\n                decesos: act-ant\n            }); \n            value -= 1\n        }\n        return(\n            diffList.reverse()\n        );\n    }\n    return(\n        <div className='newcases-graph'>\n                <h4>Defunciones por día</h4>\n                    <LineChart\n                        width={700}\n                        height={200}\n                        data={mortDays()}\n                        margin={{\n                        top: 5, right: 30, left: 20, bottom: 5,\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"dia\" />\n                        <YAxis dataKey=\"decesos\" />\n                        <Tooltip />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"decesos\" stroke=\"#cccccc\" fill=\"#000000\" label={{ position: 'insideTopLeft', angle: 90 }} />\n                    </LineChart>\n        </div>\n    ); \n}\n\nexport default MortalityGraph;","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StateMapContainer from './StateMapContainer';\nimport StateListContainer from './StateListContainer'; \nimport StateDataContainer from './StateDataContainer';\nimport GeneralGraph from './GeneralGraph';\nimport MinimalGraph from './MinimalGraph';\nimport MortalityGraph from './MortalityGraph';\n\nexport default class CentralContainer extends Component {\n    render() {\n        return (\n            <>\n                <Container className=\"contenedor-principal\">\n                    <Row className=\"justify-content-md-center\">\n                        <StateDataContainer />\n                    </Row>\n                    <Row>\n                        <GeneralGraph />\n                    </Row>\n                    <Row>\n                        <Col xs={10} md={7}>\n                            <StateMapContainer mapa='mx' titulo='México' />\n                        </Col>\n                        <Col xs={8} md={5}>\n                            <StateListContainer />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <MinimalGraph />\n                    </Row>\n                    <Row>\n                        <MortalityGraph />\n                    </Row>\n                </Container>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport { FaHeart, FaGithubAlt, FaRegNewspaper } from \"react-icons/fa\";\nimport { Container, Row } from 'react-bootstrap'; \n\nconst Footer = () =>{\n    return (\n        <>\n            <Container>\n                <Row className=\"justify-content-md-center\">\n                    <div className='links-adicionales'>\n                        <h4>Más información</h4>\n                        <p>\n                            <li><a href='https://jebusdoodles.wordpress.com/2020/04/13/panel-seguimiento-mxcovid19/'><FaRegNewspaper /> ¿Como lo hice? y preguntas frecuentes</a></li>\n                            <li><a href='https://github.com/jebusdoodles/mx-covid19'><FaGithubAlt /> Repositorio de GitHub</a></li>\n                        </p>\n                        <h4>Sitios adicionaless</h4>\n                        <p>\n                            <li><a href='https://coronavirus.gob.mx/'>Sitio oficial Secretaria de Salud [MX]</a></li>\n                            <li><a href='https://viral.datacivica.org/la-respuesta-estados'>Los estados peor preparados - Data Civika[MX]</a></li>\n                            <li><a href='https://mexico.frenalacurva.net/'>Iniciativa Frena la Curva [MX]</a></li>\n                            <li><a href='http://covidatos.mx/'>Tablero de datos COVIDATOSMX (Descontuinado)</a></li>\n                        </p>\n                    </div>\n                </Row>\n                <Row className=\"justify-content-md-center\">\n                    <div className='footer-container'>\n                        <p className='footer-text'>Hecho con <FaHeart /> por <a href='https://twitter.com/JebusDoodles'>Jesús Cortés</a>. Quédense en casa.</p>\n                    </div>\n                </Row>\n            </Container>\n        </>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { FaRegClock } from 'react-icons/fa';\nimport dataset from '../database/dbnacional'; \n\nconst LastUpdate = () =>{\n    let date_update = dataset[dataset.length - 1].fechaformat;\n    return (\n        <Alert variant='info' className='alerta-estilos'>\n            <FaRegClock /> Última actualización de información del <b> {date_update} </b>\n        </Alert>\n    );\n}\n\nexport default LastUpdate;","import React from 'react'; \nimport Helmet from 'react-helmet'; \nimport ogImg from '../../assets/image/image.png'\n\nconst SEO = (props) => (\n    <>\n        <Helmet>\n            <title>({props.confirmados}) MX COVID 19</title>\n            <meta name=\"description\" content=\"Tabla de seguimiento de los casos de COVID-19 (Coronavirus) en México\" />\n            <link rel=\"canonical\" href=\"https://mx-covid19.github.io\" />\n                { /* Tags de OpenGraph */ }\n                <meta property=\"og:url\" content=\"https://mx-covid19.github.io\" />\n                <meta property=\"og:title\" content=\"MX Covid-19 - Tabla seguimiento\" />\n                <meta property=\"og:description\" content=\"Tabla de seguimiento de los casos de COVID-19 (Coronavirus) en México\" />\n                <meta property=\"og:image\" content={ogImg} />\n                { /* Tags de Twitter Card */ }\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                <meta name=\"twitter:title\" content=\"MX Covid-19 - Tabla seguimiento\" />\n                <meta name=\"twitter:description\" content=\"Tabla de seguimiento de los casos de COVID-19 (Coronavirus) en México\" />\n                <meta name=\"twitter:image\" content={ogImg} />\n        </Helmet>\n    </>\n)\n\nexport default SEO; ","import React, { Component } from 'react'\nimport AppHeader from './../components/AppHeader';\nimport CentralContainer from './../components/CentralContainer';\nimport Footer from './../components/Footer';\nimport LastUpdate from './../components/LastUpdate'; \nimport SEO from './../components/SEO/SEO'; \nimport data from '../database/dbnacional'; \n\nexport default class HomeContainer extends Component {\n    render() {\n        let conf = data[data.length - 1].confirmados;\n        return (\n            <div>\n                <SEO confirmados={`${conf}`} />\n                <LastUpdate />\n                <AppHeader></AppHeader>\n                <CentralContainer />\n                <Footer />\n            </div>\n        )\n    }\n}\n","import React from 'react';\n//react router\nimport { BrowserRouter as Router, Route } from 'react-router-dom'; \nimport HomeContainer from './containers/HomeContainer'; \nimport './App.sass';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path={process.env.PUBLIC_URL + '/'} component={HomeContainer}></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// estilos de react bootstrap \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App></App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}